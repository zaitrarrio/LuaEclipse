LuaProfilerAnalyser_ReadFileFunction=function ReadProfile(file) \n \
     									local profile; \n\
										if io.type(file) == "file" then \n \
										profile = file\n \
										else\n \
											profile = io.open(file)\n \
										end \n \
										line_buffer = {}\n \
										local i = 1\n \
										for line in profile:lines() do\n \
											if(i ~= 1) then \n \
												_, _, local_time, total_time = string.find(line, "[^\t]+\t[^\t]+\t[^\t]+\t[^\t]+\t[^\t]+\t([^\t]+)\t([^\t]+)")\n \
												if(tonumber(local_time) == nil or tonumber(total_time) == nil) then \n\
													print(tonumber(local_time), i)\n \
													break;\n \
												end \n \
											end \n \
											line_buffer[i] = line;  i = i + 1; \n 	end\n \
										profile:close()\n \
										return line_buffer\n \
										end\n
										
LuaProfilerAnalyser_CreateSummaryFunction=function CreateSummary(lines, summary)\n \
											local global_time = 0\n \
											for i = 2, table.getn(lines) do \n \
												_, _, word = string.find(lines[i], "[^\t]+\t[^\t]+\t([^\t]+)")\n \
												_, _, local_time, total_time = string.find(lines[i], "[^\t]+\t[^\t]+\t[^\t]+\t[^\t]+\t[^\t]+\t([^\t]+)\t([^\t]+)")\n \
												if summary[word] == nil then \n \
													summary[word] = {};\n \
													summary[word]["info"] = {}\n \
													summary[word]["info"]["calls"] = 1\n \
													summary[word]["info"]["total"] = local_time\n \
													summary[word]["info"]["func"] = word\n \
												else\n \
													summary[word]["info"]["calls"] = summary[word]["info"]["calls"] + 1\n \
													summary[word]["info"]["total"] = summary[word]["info"]["total"] + local_time;\n \
													end\n \
												global_time = global_time + local_time;\n \
												end\n \
											return global_time\n \
											end\n 

LuaProfilerAnalyser_StartAnalysisFunction = function startSummary (filename) \n \
													-- Global time\n \
													global_t = 0\n \
												-- Summary table\n \
													profile_info = {}\n \
												-- Check file type\n \
													file = io.open(filename)\n \
													firstline = file:read(11)\n \
													-- File is single profile\n \
													if firstline == "stack_level" then\n \
														-- Single profile\n \
														local lines = ReadProfile(file)\n \
														global_t = CreateSummary(lines, profile_info)\n \
													else\n \
														-- File is list of profiles\n \
														-- Reset position in file\n \
														file:seek("set")\n \
														-- Loop through profiles and create summary table\n \
														for line in file:lines() do\n \
															local profile_lines\n \
															-- Read current profile\n \
															profile_lines = ReadProfile(line)\n \
															-- Build a table with profile info\n \
															global_t = global_t + CreateSummary(profile_lines, profile_info)\n \
															end\n \
														file:close()\n \
														end\n \
														-- Sort table by total time\n \
														sorted = {}\n \
														for k, v in pairs(profile_info) do table.insert(sorted, v) end\n \
														table.sort(sorted, function (a, b) return tonumber(a["info"]["total"]) > tonumber(b["info"]["total"]) end)\n \
														end\n 
														
LuaProfilerAnalyser_GetWordsListFunction = wordList = {}\n \
											function getWordsList() \n \
												for k,v in pairs(sorted) do\n \
												 if v["info"]["func"] ~= "(null)" then\n \
													table.insert(wordList,v["info"]["func"])\n \
												 end\n \
												end\n \
											end\n 
									
