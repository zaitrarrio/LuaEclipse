_G=[====[\n<dt><a name="_G"></a><strong>_G</strong></dt>\n<dd>\nA global variable (not a function) that\nholds the global environment (that is, <code>_G._G = _G</code>).\nLua itself does not use this variable;\nchanging its value does not affect any environment,\nnor vice-versa.\n(Use <a href="#pdf-setfenv"><code>setfenv</code></a> to change environments.)\n</dd>\n]====]

_VERSION=[====[\n<dt><a name="_VERSION"></a><strong>_VERSION</strong></dt>\n<dd>\nA global variable (not a function) that\nholds a string containing the current interpreter version.\nThe current contents of this variable is "<code>Lua 5.1</code>".\n</dd>\n]====]

package.cpath=[====[\n<dt><a name="package.cpath"></a><strong>package.cpath</strong></dt>\n<dd>\n<p>\nThe path used by <a href="#pdf-require"><code>require</code></a> to search for a C&nbsp;loader.\n\n\n<p>\nLua initializes the C&nbsp;path <a href="#pdf-package.cpath"><code>package.cpath</code></a> in the same way\nit initializes the Lua path <a href="#pdf-package.path"><code>package.path</code></a>,\nusing the environment variable <a name="pdf-LUA_CPATH"><code>LUA_CPATH</code></a>\nor a default path defined in <code>luaconf.h</code>.\n</dd>\n]====]

package.loaded=[====[\n<dt><a name="package.loaded"></a><strong>package.loaded</strong></dt>\n<dd>\n<p>\nA table used by <a href="#pdf-require"><code>require</code></a> to control which\nmodules are already loaded.\nWhen you require a module <code>modname</code> and\n<code>package.loaded[modname]</code> is not false,\n<a href="#pdf-require"><code>require</code></a> simply returns the value stored there.\n</dd>\n]====]

package.loaders=[====[\n<dt><a name="package.loaders"></a><strong>package.loaders</strong></dt>\n<dd>\n<p>\nA table used by <a href="#pdf-require"><code>require</code></a> to control how to load modules.\n\n\n<p>\nEach entry in this table is a <em>searcher function</em>.\nWhen looking for a module,\n<a href="#pdf-require"><code>require</code></a> calls each of these searchers in ascending order,\nwith the module name (the argument given to <a href="#pdf-require"><code>require</code></a>) as its\nsole parameter.\nThe function may return another function (the module <em>loader</em>)\nor a string explaining why it did not find that module\n(or <b>nil</b> if it has nothing to say).\nLua initializes this table with four functions.\n\n\n<p>\nThe first searcher simply looks for a loader in the\n<a href="#pdf-package.preload"><code>package.preload</code></a> table.\n\n\n<p>\nThe second searcher looks for a loader as a Lua library,\nusing the path stored at <a href="#pdf-package.path"><code>package.path</code></a>.\nA path is a sequence of <em>templates</em> separated by semicolons.\nFor each template,\nthe searcher will change each interrogation\nmark in the template by <code>filename</code>,\nwhich is the module name with each dot replaced by a\n"directory separator" (such as "<code>/</code>" in Unix);\nthen it will try to open the resulting file name.\nSo, for instance, if the Lua path is the string\n\n<pre>\n     "./?.lua;./?.lc;/usr/local/?/init.lua"\n</pre><p>\nthe search for a Lua file for module <code>foo</code>\nwill try to open the files\n<code>./foo.lua</code>, <code>./foo.lc</code>, and\n<code>/usr/local/foo/init.lua</code>, in that order.\n\n\n<p>\nThe third searcher looks for a loader as a C&nbsp;library,\nusing the path given by the variable <a href="#pdf-package.cpath"><code>package.cpath</code></a>.\nFor instance,\nif the C&nbsp;path is the string\n\n<pre>\n     "./?.so;./?.dll;/usr/local/?/init.so"\n</pre><p>\nthe searcher for module <code>foo</code>\nwill try to open the files <code>./foo.so</code>, <code>./foo.dll</code>,\nand <code>/usr/local/foo/init.so</code>, in that order.\nOnce it finds a C&nbsp;library,\nthis searcher first uses a dynamic link facility to link the\napplication with the library.\nThen it tries to find a C&nbsp;function inside the library to\nbe used as the loader.\nThe name of this C&nbsp;function is the string "<code>luaopen_</code>"\nconcatenated with a copy of the module name where each dot\nis replaced by an underscore.\nMoreover, if the module name has a hyphen,\nits prefix up to (and including) the first hyphen is removed.\nFor instance, if the module name is <code>a.v1-b.c</code>,\nthe function name will be <code>luaopen_b_c</code>.\n\n\n<p>\nThe fourth searcher tries an <em>all-in-one loader</em>.\nIt searches the C&nbsp;path for a library for\nthe root name of the given module.\nFor instance, when requiring <code>a.b.c</code>,\nit will search for a C&nbsp;library for <code>a</code>.\nIf found, it looks into it for an open function for\nthe submodule;\nin our example, that would be <code>luaopen_a_b_c</code>.\nWith this facility, a package can pack several C&nbsp;submodules\ninto one single library,\nwith each submodule keeping its original open function.\n</dd>\n]====]

package.path=[====[\n<dt><a name="package.path"></a><strong>package.path</strong></dt>\n<dd>\n<p>\nThe path used by <a href="#pdf-require"><code>require</code></a> to search for a Lua loader.\n\n\n<p>\nAt start-up, Lua initializes this variable with\nthe value of the environment variable <a name="pdf-LUA_PATH"><code>LUA_PATH</code></a> or\nwith a default path defined in <code>luaconf.h</code>,\nif the environment variable is not defined.\nAny "<code>;;</code>" in the value of the environment variable\nis replaced by the default path.\n</dd>\n]====]

package.preload=[====[\n<dt><a name="package.preload"></a><strong>package.preload</strong></dt>\n<dd>\n<p>\nA table to store loaders for specific modules\n(see <a href="#pdf-require"><code>require</code></a>).\n</dd>\n]====]

math.huge=[====[\n<dt><a name="math.huge"></a><strong>math.huge</strong></dt>\n<dd>\n<p>\nThe value <code>HUGE_VAL</code>,\na value larger than or equal to any other numerical value.\n</dd>\n]====]

math.pi=[====[\n<dt><a name="math.pi"></a><strong>math.pi</strong></dt>\n<dd>\n<p>\nThe value of <em>pi</em>.\n</dd>\n]====]

assert =[====[\n<dt><a name="assert "></a><strong>assert </strong>&nbsp;(v [, message])</dt>\n<dd>\nIssues an  error when\nthe value of its argument <code>v</code> is false (i.e., <b>nil</b> or <b>false</b>);\notherwise, returns all its arguments.\n<code>message</code> is an error message;\nwhen absent, it defaults to "assertion failed!"\n</dd>\n]====]

collectgarbage =[====[\n<dt><a name="collectgarbage "></a><strong>collectgarbage </strong>&nbsp;(opt [, arg])</dt>\n<dd>\n<p>\nThis function is a generic interface to the garbage collector.\nIt performs different functions according to its first argument, <code>opt</code>:\n\n<ul>\n\n<li><b>"stop":</b>\nstops the garbage collector.\n</li>\n\n<li><b>"restart":</b>\nrestarts the garbage collector.\n</li>\n\n<li><b>"collect":</b>\nperforms a full garbage-collection cycle.\n</li>\n\n<li><b>"count":</b>\nreturns the total memory in use by Lua (in Kbytes).\n</li>\n\n<li><b>"step":</b>\nperforms a garbage-collection step.\nThe step "size" is controlled by <code>arg</code>\n(larger values mean more steps) in a non-specified way.\nIf you want to control the step size\nyou must experimentally tune the value of <code>arg</code>.\nReturns <b>true</b> if the step finished a collection cycle.\n</li>\n\n<li><b>"setpause":</b>\nsets <code>arg</code>/100 as the new value for the <em>pause</em> of\nthe collector (see <a href="#2.10">&sect;2.10</a>).\n</li>\n\n<li><b>"setstepmul":</b>\nsets <code>arg</code>/100 as the new value for the <em>step multiplier</em> of\nthe collector (see <a href="#2.10">&sect;2.10</a>).\n</li>\n\n</ul>\n</dd>\n]====]

dofile =[====[\n<dt><a name="dofile "></a><strong>dofile </strong>&nbsp;(filename)</dt>\n<dd>\nOpens the named file and executes its contents as a Lua chunk.\nWhen called without arguments,\n<code>dofile</code> executes the contents of the standard input (<code>stdin</code>).\nReturns all values returned by the chunk.\nIn case of errors, <code>dofile</code> propagates the error\nto its caller (that is, <code>dofile</code> does not run in protected mode).\n</dd>\n]====]

error =[====[\n<dt><a name="error "></a><strong>error </strong>&nbsp;(message [, level])</dt>\n<dd>\nTerminates the last protected function called\nand returns <code>message</code> as the error message.\nFunction <code>error</code> never returns.\n\n\n<p>\nUsually, <code>error</code> adds some information about the error position\nat the beginning of the message.\nThe <code>level</code> argument specifies how to get the error position.\nWith level&nbsp;1 (the default), the error position is where the\n<code>error</code> function was called.\nLevel&nbsp;2 points the error to where the function\nthat called <code>error</code> was called; and so on.\nPassing a level&nbsp;0 avoids the addition of error position information\nto the message.\n</dd>\n]====]

getfenv =[====[\n<dt><a name="getfenv "></a><strong>getfenv </strong>&nbsp;([f])</dt>\n<dd>\nReturns the current environment in use by the function.\n<code>f</code> can be a Lua function or a number\nthat specifies the function at that stack level:\nLevel&nbsp;1 is the function calling <code>getfenv</code>.\nIf the given function is not a Lua function,\nor if <code>f</code> is 0,\n<code>getfenv</code> returns the global environment.\nThe default for <code>f</code> is 1.\n</dd>\n]====]

getmetatable =[====[\n<dt><a name="getmetatable "></a><strong>getmetatable </strong>&nbsp;(object)</dt>\n<dd>\n<p>\nIf <code>object</code> does not have a metatable, returns <b>nil</b>.\nOtherwise,\nif the object's metatable has a <code>"__metatable"</code> field,\nreturns the associated value.\nOtherwise, returns the metatable of the given object.\n</dd>\n]====]

ipairs =[====[\n<dt><a name="ipairs "></a><strong>ipairs </strong>&nbsp;(t)</dt>\n<dd>\n<p>\nReturns three values: an iterator function, the table <code>t</code>, and 0,\nso that the construction\n\n<pre>\n     for i,v in ipairs(t) do <em>body</em> end\n</pre><p>\nwill iterate over the pairs (<code>1,t[1]</code>), (<code>2,t[2]</code>), &middot;&middot;&middot;,\nup to the first integer key absent from the table.\n</dd>\n]====]

load =[====[\n<dt><a name="load "></a><strong>load </strong>&nbsp;(func [, chunkname])</dt>\n<dd>\n<p>\nLoads a chunk using function <code>func</code> to get its pieces.\nEach call to <code>func</code> must return a string that concatenates\nwith previous results.\nA return of <b>nil</b> (or no value) signals the end of the chunk.\n\n\n<p>\nIf there are no errors, \nreturns the compiled chunk as a function;\notherwise, returns <b>nil</b> plus the error message.\nThe environment of the returned function is the global environment.\n\n\n<p>\n<code>chunkname</code> is used as the chunk name for error messages\nand debug information.\nWhen absent,\nit defaults to "<code>=(load)</code>".\n</dd>\n]====]

loadfile =[====[\n<dt><a name="loadfile "></a><strong>loadfile </strong>&nbsp;([filename])</dt>\n<dd>\n<p>\nSimilar to <a href="#pdf-load"><code>load</code></a>,\nbut gets the chunk from file <code>filename</code>\nor from the standard input,\nif no file name is given.\n</dd>\n]====]

loadstring =[====[\n<dt><a name="loadstring "></a><strong>loadstring </strong>&nbsp;(string [, chunkname])</dt>\n<dd>\n<p>\nSimilar to <a href="#pdf-load"><code>load</code></a>,\nbut gets the chunk from the given string.\n\n\n<p>\nTo load and run a given string, use the idiom\n\n<pre>\n     assert(loadstring(s))()\n</pre>\n\n<p>\nWhen absent,\n<code>chunkname</code> defaults to the given string.\n</dd>\n]====]

next =[====[\n<dt><a name="next "></a><strong>next </strong>&nbsp;(table [, index])</dt>\n<dd>\n<p>\nAllows a program to traverse all fields of a table.\nIts first argument is a table and its second argument\nis an index in this table.\n<code>next</code> returns the next index of the table\nand its associated value.\nWhen called with <b>nil</b> as its second argument,\n<code>next</code> returns an initial index\nand its associated value.\nWhen called with the last index,\nor with <b>nil</b> in an empty table,\n<code>next</code> returns <b>nil</b>.\nIf the second argument is absent, then it is interpreted as <b>nil</b>.\nIn particular,\nyou can use <code>next(t)</code> to check whether a table is empty.\n\n\n<p>\nThe order in which the indices are enumerated is not specified,\n<em>even for numeric indices</em>.\n(To traverse a table in numeric order,\nuse a numerical <b>for</b> or the <a href="#pdf-ipairs"><code>ipairs</code></a> function.)\n\n\n<p>\nThe behavior of <code>next</code> is <em>undefined</em> if,\nduring the traversal,\nyou assign any value to a non-existent field in the table.\nYou may however modify existing fields.\nIn particular, you may clear existing fields.\n</dd>\n]====]

pairs =[====[\n<dt><a name="pairs "></a><strong>pairs </strong>&nbsp;(t)</dt>\n<dd>\n<p>\nReturns three values: the <a href="#pdf-next"><code>next</code></a> function, the table <code>t</code>, and <b>nil</b>,\nso that the construction\n\n<pre>\n     for k,v in pairs(t) do <em>body</em> end\n</pre><p>\nwill iterate over all key&ndash;value pairs of table <code>t</code>.\n\n\n<p>\nSee function <a href="#pdf-next"><code>next</code></a> for the caveats of modifying\nthe table during its traversal.\n</dd>\n]====]

pcall =[====[\n<dt><a name="pcall "></a><strong>pcall </strong>&nbsp;(f, arg1, &middot;&middot;&middot;)</dt>\n<dd>\n<p>\nCalls function <code>f</code> with\nthe given arguments in <em>protected mode</em>.\nThis means that any error inside&nbsp;<code>f</code> is not propagated;\ninstead, <code>pcall</code> catches the error\nand returns a status code.\nIts first result is the status code (a boolean),\nwhich is true if the call succeeds without errors.\nIn such case, <code>pcall</code> also returns all results from the call,\nafter this first result.\nIn case of any error, <code>pcall</code> returns <b>false</b> plus the error message.\n</dd>\n]====]

print =[====[\n<dt><a name="print "></a><strong>print </strong>&nbsp;(&middot;&middot;&middot;)</dt>\n<dd>\nReceives any number of arguments,\nand prints their values to <code>stdout</code>,\nusing the <a href="#pdf-tostring"><code>tostring</code></a> function to convert them to strings.\n<code>print</code> is not intended for formatted output,\nbut only as a quick way to show a value,\ntypically for debugging.\nFor formatted output, use <a href="#pdf-string.format"><code>string.format</code></a>.\n</dd>\n]====]

rawequal =[====[\n<dt><a name="rawequal "></a><strong>rawequal </strong>&nbsp;(v1, v2)</dt>\n<dd>\nChecks whether <code>v1</code> is equal to <code>v2</code>,\nwithout invoking any metamethod.\nReturns a boolean.\n</dd>\n]====]

rawget =[====[\n<dt><a name="rawget "></a><strong>rawget </strong>&nbsp;(table, index)</dt>\n<dd>\nGets the real value of <code>table[index]</code>,\nwithout invoking any metamethod.\n<code>table</code> must be a table;\n<code>index</code> may be any value.\n</dd>\n]====]

rawset =[====[\n<dt><a name="rawset "></a><strong>rawset </strong>&nbsp;(table, index, value)</dt>\n<dd>\nSets the real value of <code>table[index]</code> to <code>value</code>,\nwithout invoking any metamethod.\n<code>table</code> must be a table,\n<code>index</code> any value different from <b>nil</b>,\nand <code>value</code> any Lua value.\n\n\n<p>\nThis function returns <code>table</code>.\n</dd>\n]====]

select =[====[\n<dt><a name="select "></a><strong>select </strong>&nbsp;(index, &middot;&middot;&middot;)</dt>\n<dd>\n<p>\nIf <code>index</code> is a number,\nreturns all arguments after argument number <code>index</code>.\nOtherwise, <code>index</code> must be the string <code>"#"</code>,\nand <code>select</code> returns the total number of extra arguments it received.\n</dd>\n]====]

setfenv =[====[\n<dt><a name="setfenv "></a><strong>setfenv </strong>&nbsp;(f, table)</dt>\n<dd>\n<p>\nSets the environment to be used by the given function.\n<code>f</code> can be a Lua function or a number\nthat specifies the function at that stack level:\nLevel&nbsp;1 is the function calling <code>setfenv</code>.\n<code>setfenv</code> returns the given function.\n\n\n<p>\nAs a special case, when <code>f</code> is 0 <code>setfenv</code> changes\nthe environment of the running thread.\nIn this case, <code>setfenv</code> returns no values.\n</dd>\n]====]

setmetatable =[====[\n<dt><a name="setmetatable "></a><strong>setmetatable </strong>&nbsp;(table, metatable)</dt>\n<dd>\n<p>\nSets the metatable for the given table.\n(You cannot change the metatable of other types from Lua, only from&nbsp;C.)\nIf <code>metatable</code> is <b>nil</b>,\nremoves the metatable of the given table.\nIf the original metatable has a <code>"__metatable"</code> field,\nraises an error.\n\n\n<p>\nThis function returns <code>table</code>.\n</dd>\n]====]

tonumber =[====[\n<dt><a name="tonumber "></a><strong>tonumber </strong>&nbsp;(e [, base])</dt>\n<dd>\nTries to convert its argument to a number.\nIf the argument is already a number or a string convertible\nto a number, then <code>tonumber</code> returns this number;\notherwise, it returns <b>nil</b>.\n\n\n<p>\nAn optional argument specifies the base to interpret the numeral.\nThe base may be any integer between 2 and 36, inclusive.\nIn bases above&nbsp;10, the letter '<code>A</code>' (in either upper or lower case)\nrepresents&nbsp;10, '<code>B</code>' represents&nbsp;11, and so forth,\nwith '<code>Z</code>' representing 35.\nIn base 10 (the default), the number may have a decimal part,\nas well as an optional exponent part (see <a href="#2.1">&sect;2.1</a>).\nIn other bases, only unsigned integers are accepted.\n</dd>\n]====]

tostring =[====[\n<dt><a name="tostring "></a><strong>tostring </strong>&nbsp;(e)</dt>\n<dd>\nReceives an argument of any type and\nconverts it to a string in a reasonable format.\nFor complete control of how numbers are converted,\nuse <a href="#pdf-string.format"><code>string.format</code></a>.\n\n\n<p>\nIf the metatable of <code>e</code> has a <code>"__tostring"</code> field,\nthen <code>tostring</code> calls the corresponding value\nwith <code>e</code> as argument,\nand uses the result of the call as its result.\n</dd>\n]====]

type =[====[\n<dt><a name="type "></a><strong>type </strong>&nbsp;(v)</dt>\n<dd>\nReturns the type of its only argument, coded as a string.\nThe possible results of this function are\n"<code>nil</code>" (a string, not the value <b>nil</b>),\n"<code>number</code>",\n"<code>string</code>",\n"<code>boolean</code>",\n"<code>table</code>",\n"<code>function</code>",\n"<code>thread</code>",\nand "<code>userdata</code>".\n</dd>\n]====]

unpack =[====[\n<dt><a name="unpack "></a><strong>unpack </strong>&nbsp;(list [, i [, j]])</dt>\n<dd>\nReturns the elements from the given table.\nThis function is equivalent to\n\n<pre>\n     return list[i], list[i+1], &middot;&middot;&middot;, list[j]\n</pre><p>\nexcept that the above code can be written only for a fixed number\nof elements.\nBy default, <code>i</code> is&nbsp;1 and <code>j</code> is the length of the list,\nas defined by the length operator (see <a href="#2.5.5">&sect;2.5.5</a>).\n</dd>\n]====]

xpcall =[====[\n<dt><a name="xpcall "></a><strong>xpcall </strong>&nbsp;(f, err)</dt>\n<dd>\n<p>\nThis function is similar to <a href="#pdf-pcall"><code>pcall</code></a>,\nexcept that you can set a new error handler.\n\n\n<p>\n<code>xpcall</code> calls function <code>f</code> in protected mode,\nusing <code>err</code> as the error handler.\nAny error inside <code>f</code> is not propagated;\ninstead, <code>xpcall</code> catches the error,\ncalls the <code>err</code> function with the original error object,\nand returns a status code.\nIts first result is the status code (a boolean),\nwhich is true if the call succeeds without errors.\nIn this case, <code>xpcall</code> also returns all results from the call,\nafter this first result.\nIn case of any error,\n<code>xpcall</code> returns <b>false</b> plus the result from <code>err</code>.\n\n\n\n\n\n\n\n<h2>5.2 - <a name="5.2">Coroutine Manipulation</a></h2>\n\n<p>\nThe operations related to coroutines comprise a sub-library of\nthe basic library and come inside the table <a name="pdf-coroutine"><code>coroutine</code></a>.\nSee <a href="#2.11">&sect;2.11</a> for a general description of coroutines.\n</dd>\n]====]

coroutine.create =[====[\n<dt><a name="coroutine.create "></a><strong>coroutine.create </strong>&nbsp;(f)</dt>\n<dd>\n<p>\nCreates a new coroutine, with body <code>f</code>.\n<code>f</code> must be a Lua function.\nReturns this new coroutine,\nan object with type <code>"thread"</code>.\n</dd>\n]====]

coroutine.resume =[====[\n<dt><a name="coroutine.resume "></a><strong>coroutine.resume </strong>&nbsp;(co [, val1, &middot;&middot;&middot;])</dt>\n<dd>\n<p>\nStarts or continues the execution of coroutine <code>co</code>.\nThe first time you resume a coroutine,\nit starts running its body.\nThe values <code>val1</code>, &middot;&middot;&middot; are passed\nas the arguments to the body function.\nIf the coroutine has yielded,\n<code>resume</code> restarts it;\nthe values <code>val1</code>, &middot;&middot;&middot; are passed\nas the results from the yield.\n\n\n<p>\nIf the coroutine runs without any errors,\n<code>resume</code> returns <b>true</b> plus any values passed to <code>yield</code>\n(if the coroutine yields) or any values returned by the body function\n(if the coroutine terminates).\nIf there is any error,\n<code>resume</code> returns <b>false</b> plus the error message.\n</dd>\n]====]

coroutine.running =[====[\n<dt><a name="coroutine.running "></a><strong>coroutine.running </strong>&nbsp;()</dt>\n<dd>\n<p>\nReturns the running coroutine,\nor <b>nil</b> when called by the main thread.\n</dd>\n]====]

coroutine.status =[====[\n<dt><a name="coroutine.status "></a><strong>coroutine.status </strong>&nbsp;(co)</dt>\n<dd>\n<p>\nReturns the status of coroutine <code>co</code>, as a string:\n<code>"running"</code>,\nif the coroutine is running (that is, it called <code>status</code>);\n<code>"suspended"</code>, if the coroutine is suspended in a call to <code>yield</code>,\nor if it has not started running yet;\n<code>"normal"</code> if the coroutine is active but not running\n(that is, it has resumed another coroutine);\nand <code>"dead"</code> if the coroutine has finished its body function,\nor if it has stopped with an error.\n</dd>\n]====]

coroutine.wrap =[====[\n<dt><a name="coroutine.wrap "></a><strong>coroutine.wrap </strong>&nbsp;(f)</dt>\n<dd>\n<p>\nCreates a new coroutine, with body <code>f</code>.\n<code>f</code> must be a Lua function.\nReturns a function that resumes the coroutine each time it is called.\nAny arguments passed to the function behave as the\nextra arguments to <code>resume</code>.\nReturns the same values returned by <code>resume</code>,\nexcept the first boolean.\nIn case of error, propagates the error.\n</dd>\n]====]

coroutine.yield =[====[\n<dt><a name="coroutine.yield "></a><strong>coroutine.yield </strong>&nbsp;(&middot;&middot;&middot;)</dt>\n<dd>\n<p>\nSuspends the execution of the calling coroutine.\nThe coroutine cannot be running a C&nbsp;function,\na metamethod, or an iterator.\nAny arguments to <code>yield</code> are passed as extra results to <code>resume</code>.\n\n\n\n\n\n\n\n<h2>5.3 - <a name="5.3">Modules</a></h2>\n\n<p>\nThe package library provides basic\nfacilities for loading and building modules in Lua.\nIt exports two of its functions directly in the global environment:\n<a href="#pdf-require"><code>require</code></a> and <a href="#pdf-module"><code>module</code></a>.\nEverything else is exported in a table <a name="pdf-package"><code>package</code></a>.\n</dd>\n]====]

module =[====[\n<dt><a name="module "></a><strong>module </strong>&nbsp;(name [, &middot;&middot;&middot;])</dt>\n<dd>\n<p>\nCreates a module.\nIf there is a table in <code>package.loaded[name]</code>,\nthis table is the module.\nOtherwise, if there is a global table <code>t</code> with the given name,\nthis table is the module.\nOtherwise creates a new table <code>t</code> and\nsets it as the value of the global <code>name</code> and\nthe value of <code>package.loaded[name]</code>.\nThis function also initializes <code>t._NAME</code> with the given name,\n<code>t._M</code> with the module (<code>t</code> itself),\nand <code>t._PACKAGE</code> with the package name\n(the full module name minus last component; see below).\nFinally, <code>module</code> sets <code>t</code> as the new environment\nof the current function and the new value of <code>package.loaded[name]</code>,\nso that <a href="#pdf-require"><code>require</code></a> returns <code>t</code>.\n\n\n<p>\nIf <code>name</code> is a compound name\n(that is, one with components separated by dots),\n<code>module</code> creates (or reuses, if they already exist)\ntables for each component.\nFor instance, if <code>name</code> is <code>a.b.c</code>,\nthen <code>module</code> stores the module table in field <code>c</code> of\nfield <code>b</code> of global <code>a</code>.\n\n\n<p>\nThis function may receive optional <em>options</em> after\nthe module name,\nwhere each option is a function to be applied over the module.\n</dd>\n]====]

require =[====[\n<dt><a name="require "></a><strong>require </strong>&nbsp;(modname)</dt>\n<dd>\n<p>\nLoads the given module.\nThe function starts by looking into the <a href="#pdf-package.loaded"><code>package.loaded</code></a> table\nto determine whether <code>modname</code> is already loaded.\nIf it is, then <code>require</code> returns the value stored\nat <code>package.loaded[modname]</code>.\nOtherwise, it tries to find a <em>loader</em> for the module.\n\n\n<p>\nTo find a loader,\n<code>require</code> is guided by the <a href="#pdf-package.loaders"><code>package.loaders</code></a> array.\nBy changing this array,\nwe can change how <code>require</code> looks for a module.\nThe following explanation is based on the default configuration\nfor <a href="#pdf-package.loaders"><code>package.loaders</code></a>.\n\n\n<p>\nFirst <code>require</code> queries <code>package.preload[modname]</code>.\nIf it has a value,\nthis value (which should be a function) is the loader.\nOtherwise <code>require</code> searches for a Lua loader using the\npath stored in <a href="#pdf-package.path"><code>package.path</code></a>.\nIf that also fails, it searches for a C&nbsp;loader using the\npath stored in <a href="#pdf-package.cpath"><code>package.cpath</code></a>.\nIf that also fails,\nit tries an <em>all-in-one</em> loader (see <a href="#pdf-package.loaders"><code>package.loaders</code></a>).\n\n\n<p>\nOnce a loader is found,\n<code>require</code> calls the loader with a single argument, <code>modname</code>.\nIf the loader returns any value,\n<code>require</code> assigns the returned value to <code>package.loaded[modname]</code>.\nIf the loader returns no value and\nhas not assigned any value to <code>package.loaded[modname]</code>,\nthen <code>require</code> assigns <b>true</b> to this entry.\nIn any case, <code>require</code> returns the\nfinal value of <code>package.loaded[modname]</code>.\n\n\n<p>\nIf there is any error loading or running the module,\nor if it cannot find any loader for the module,\nthen <code>require</code> signals an error.\n</dd>\n]====]

package.loadlib =[====[\n<dt><a name="package.loadlib "></a><strong>package.loadlib </strong>&nbsp;(libname, funcname)</dt>\n<dd>\n<p>\nDynamically links the host program with the C&nbsp;library <code>libname</code>.\nInside this library, looks for a function <code>funcname</code>\nand returns this function as a C&nbsp;function.\n(So, <code>funcname</code> must follow the protocol (see <a href="#lua_CFunction"><code>lua_CFunction</code></a>)).\n\n\n<p>\nThis is a low-level function.\nIt completely bypasses the package and module system.\nUnlike <a href="#pdf-require"><code>require</code></a>,\nit does not perform any path searching and\ndoes not automatically adds extensions.\n<code>libname</code> must be the complete file name of the C&nbsp;library,\nincluding if necessary a path and extension.\n<code>funcname</code> must be the exact name exported by the C&nbsp;library\n(which may depend on the C&nbsp;compiler and linker used).\n\n\n<p>\nThis function is not supported by ANSI C.\nAs such, it is only available on some platforms\n(Windows, Linux, Mac OS X, Solaris, BSD,\nplus other Unix systems that support the <code>dlfcn</code> standard).\n</dd>\n]====]

package.seeall =[====[\n<dt><a name="package.seeall "></a><strong>package.seeall </strong>&nbsp;(module)</dt>\n<dd>\n<p>\nSets a metatable for <code>module</code> with\nits <code>__index</code> field referring to the global environment,\nso that this module inherits values\nfrom the global environment.\nTo be used as an option to function <a href="#pdf-module"><code>module</code></a>.\n\n\n\n\n\n\n\n<h2>5.4 - <a name="5.4">String Manipulation</a></h2>\n\n<p>\nThis library provides generic functions for string manipulation,\nsuch as finding and extracting substrings, and pattern matching.\nWhen indexing a string in Lua, the first character is at position&nbsp;1\n(not at&nbsp;0, as in C).\nIndices are allowed to be negative and are interpreted as indexing backwards,\nfrom the end of the string.\nThus, the last character is at position -1, and so on.\n\n\n<p>\nThe string library provides all its functions inside the table\n<a name="pdf-string"><code>string</code></a>.\nIt also sets a metatable for strings\nwhere the <code>__index</code> field points to the <code>string</code> table.\nTherefore, you can use the string functions in object-oriented style.\nFor instance, <code>string.byte(s, i)</code>\ncan be written as <code>s:byte(i)</code>.\n</dd>\n]====]

string.byte =[====[\n<dt><a name="string.byte "></a><strong>string.byte </strong>&nbsp;(s [, i [, j]])</dt>\n<dd>\nReturns the internal numerical codes of the characters <code>s[i]</code>,\n<code>s[i+1]</code>, &middot;&middot;&middot;, <code>s[j]</code>.\nThe default value for <code>i</code> is&nbsp;1;\nthe default value for <code>j</code> is&nbsp;<code>i</code>.\n\n\n<p>\nNote that numerical codes are not necessarily portable across platforms.\n</dd>\n]====]

string.char =[====[\n<dt><a name="string.char "></a><strong>string.char </strong>&nbsp;(&middot;&middot;&middot;)</dt>\n<dd>\nReceives zero or more integers.\nReturns a string with length equal to the number of arguments,\nin which each character has the internal numerical code equal\nto its corresponding argument.\n\n\n<p>\nNote that numerical codes are not necessarily portable across platforms.\n</dd>\n]====]

string.dump =[====[\n<dt><a name="string.dump "></a><strong>string.dump </strong>&nbsp;(function)</dt>\n<dd>\n<p>\nReturns a string containing a binary representation of the given function,\nso that a later <a href="#pdf-loadstring"><code>loadstring</code></a> on this string returns\na copy of the function.\n<code>function</code> must be a Lua function without upvalues.\n</dd>\n]====]

string.find =[====[\n<dt><a name="string.find "></a><strong>string.find </strong>&nbsp;(s, pattern [, init [, plain]])</dt>\n<dd>\nLooks for the first match of\n<code>pattern</code> in the string <code>s</code>.\nIf it finds a match, then <code>find</code> returns the indices of&nbsp;<code>s</code>\nwhere this occurrence starts and ends;\notherwise, it returns <b>nil</b>.\nA third, optional numerical argument <code>init</code> specifies\nwhere to start the search;\nits default value is&nbsp;1 and may be negative.\nA value of <b>true</b> as a fourth, optional argument <code>plain</code>\nturns off the pattern matching facilities,\nso the function does a plain "find substring" operation,\nwith no characters in <code>pattern</code> being considered "magic".\nNote that if <code>plain</code> is given, then <code>init</code> must be given as well.\n\n\n<p>\nIf the pattern has captures,\nthen in a successful match\nthe captured values are also returned,\nafter the two indices.\n</dd>\n]====]

string.format =[====[\n<dt><a name="string.format "></a><strong>string.format </strong>&nbsp;(formatstring, &middot;&middot;&middot;)</dt>\n<dd>\nReturns a formatted version of its variable number of arguments\nfollowing the description given in its first argument (which must be a string).\nThe format string follows the same rules as the <code>printf</code> family of\nstandard C&nbsp;functions.\nThe only differences are that the options/modifiers\n<code>*</code>, <code>l</code>, <code>L</code>, <code>n</code>, <code>p</code>,\nand <code>h</code> are not supported\nand that there is an extra option, <code>q</code>.\nThe <code>q</code> option formats a string in a form suitable to be safely read\nback by the Lua interpreter:\nthe string is written between double quotes,\nand all double quotes, newlines, embedded zeros,\nand backslashes in the string\nare correctly escaped when written.\nFor instance, the call\n\n<pre>\n     string.format('%q', 'a string with "quotes" and \n new line')\n</pre><p>\nwill produce the string:\n\n<pre>\n     "a string with \"quotes\" and \\n      new line"\n</pre>\n\n<p>\nThe options <code>c</code>, <code>d</code>, <code>E</code>, <code>e</code>, <code>f</code>,\n<code>g</code>, <code>G</code>, <code>i</code>, <code>o</code>, <code>u</code>, <code>X</code>, and <code>x</code> all\nexpect a number as argument,\nwhereas <code>q</code> and <code>s</code> expect a string.\n\n\n<p>\nThis function does not accept string values\ncontaining embedded zeros,\nexcept as arguments to the <code>q</code> option.\n</dd>\n]====]

string.gmatch =[====[\n<dt><a name="string.gmatch "></a><strong>string.gmatch </strong>&nbsp;(s, pattern)</dt>\n<dd>\nReturns an iterator function that,\neach time it is called,\nreturns the next captures from <code>pattern</code> over string <code>s</code>.\nIf <code>pattern</code> specifies no captures,\nthen the whole match is produced in each call.\n\n\n<p>\nAs an example, the following loop\n\n<pre>\n     s = "hello world from Lua"\n     for w in string.gmatch(s, "%a+") do\n       print(w)\n     end\n</pre><p>\nwill iterate over all the words from string <code>s</code>,\nprinting one per line.\nThe next example collects all pairs <code>key=value</code> from the\ngiven string into a table:\n\n<pre>\n     t = {}\n     s = "from=world, to=Lua"\n     for k, v in string.gmatch(s, "(%w+)=(%w+)") do\n       t[k] = v\n     end\n</pre>\n\n<p>\nFor this function, a '<code>^</code>' at the start of a pattern does not\nwork as an anchor, as this would prevent the iteration.\n</dd>\n]====]

string.gsub =[====[\n<dt><a name="string.gsub "></a><strong>string.gsub </strong>&nbsp;(s, pattern, repl [, n])</dt>\n<dd>\nReturns a copy of <code>s</code>\nin which all (or the first <code>n</code>, if given)\noccurrences of the <code>pattern</code> have been\nreplaced by a replacement string specified by <code>repl</code>,\nwhich may be a string, a table, or a function.\n<code>gsub</code> also returns, as its second value,\nthe total number of matches that occurred.\n\n\n<p>\nIf <code>repl</code> is a string, then its value is used for replacement.\nThe character&nbsp;<code>%</code> works as an escape character:\nany sequence in <code>repl</code> of the form <code>%<em>n</em></code>,\nwith <em>n</em> between 1 and 9,\nstands for the value of the <em>n</em>-th captured substring (see below).\nThe sequence <code>%0</code> stands for the whole match.\nThe sequence <code>%%</code> stands for a single&nbsp;<code>%</code>.\n\n\n<p>\nIf <code>repl</code> is a table, then the table is queried for every match,\nusing the first capture as the key;\nif the pattern specifies no captures,\nthen the whole match is used as the key.\n\n\n<p>\nIf <code>repl</code> is a function, then this function is called every time a\nmatch occurs, with all captured substrings passed as arguments,\nin order;\nif the pattern specifies no captures,\nthen the whole match is passed as a sole argument.\n\n\n<p>\nIf the value returned by the table query or by the function call\nis a string or a number,\nthen it is used as the replacement string;\notherwise, if it is <b>false</b> or <b>nil</b>,\nthen there is no replacement\n(that is, the original match is kept in the string).\n\n\n<p>\nHere are some examples:\n\n<pre>\n     x = string.gsub("hello world", "(%w+)", "%1 %1")\n     --&gt; x="hello hello world world"\n     \n     x = string.gsub("hello world", "%w+", "%0 %0", 1)\n     --&gt; x="hello hello world"\n     \n     x = string.gsub("hello world from Lua", "(%w+)%s*(%w+)", "%2 %1")\n     --&gt; x="world hello Lua from"\n     \n     x = string.gsub("home = $HOME, user = $USER", "%$(%w+)", os.getenv)\n     --&gt; x="home = /home/roberto, user = roberto"\n     \n     x = string.gsub("4+5 = $return 4+5$", "%$(.-)%$", function (s)\n           return loadstring(s)()\n         end)\n     --&gt; x="4+5 = 9"\n     \n     local t = {name="lua", version="5.1"}\n     x = string.gsub("$name-$version.tar.gz", "%$(%w+)", t)\n     --&gt; x="lua-5.1.tar.gz"\n</pre>\n</dd>\n]====]

string.len =[====[\n<dt><a name="string.len "></a><strong>string.len </strong>&nbsp;(s)</dt>\n<dd>\nReceives a string and returns its length.\nThe empty string <code>""</code> has length 0.\nEmbedded zeros are counted,\nso <code>"a\000bc\000"</code> has length 5.\n</dd>\n]====]

string.lower =[====[\n<dt><a name="string.lower "></a><strong>string.lower </strong>&nbsp;(s)</dt>\n<dd>\nReceives a string and returns a copy of this string with all\nuppercase letters changed to lowercase.\nAll other characters are left unchanged.\nThe definition of what an uppercase letter is depends on the current locale.\n</dd>\n]====]

string.match =[====[\n<dt><a name="string.match "></a><strong>string.match </strong>&nbsp;(s, pattern [, init])</dt>\n<dd>\nLooks for the first <em>match</em> of\n<code>pattern</code> in the string <code>s</code>.\nIf it finds one, then <code>match</code> returns\nthe captures from the pattern;\notherwise it returns <b>nil</b>.\nIf <code>pattern</code> specifies no captures,\nthen the whole match is returned.\nA third, optional numerical argument <code>init</code> specifies\nwhere to start the search;\nits default value is&nbsp;1 and may be negative.\n</dd>\n]====]

string.rep =[====[\n<dt><a name="string.rep "></a><strong>string.rep </strong>&nbsp;(s, n)</dt>\n<dd>\nReturns a string that is the concatenation of <code>n</code> copies of\nthe string <code>s</code>.\n</dd>\n]====]

string.reverse =[====[\n<dt><a name="string.reverse "></a><strong>string.reverse </strong>&nbsp;(s)</dt>\n<dd>\nReturns a string that is the string <code>s</code> reversed.\n</dd>\n]====]

string.sub =[====[\n<dt><a name="string.sub "></a><strong>string.sub </strong>&nbsp;(s, i [, j])</dt>\n<dd>\nReturns the substring of <code>s</code> that\nstarts at <code>i</code>  and continues until <code>j</code>;\n<code>i</code> and <code>j</code> may be negative.\nIf <code>j</code> is absent, then it is assumed to be equal to -1\n(which is the same as the string length).\nIn particular,\nthe call <code>string.sub(s,1,j)</code> returns a prefix of <code>s</code>\nwith length <code>j</code>,\nand <code>string.sub(s, -i)</code> returns a suffix of <code>s</code>\nwith length <code>i</code>.\n</dd>\n]====]

string.upper =[====[\n<dt><a name="string.upper "></a><strong>string.upper </strong>&nbsp;(s)</dt>\n<dd>\nReceives a string and returns a copy of this string with all\nlowercase letters changed to uppercase.\nAll other characters are left unchanged.\nThe definition of what a lowercase letter is depends on the current locale.\n\n\n\n<h3>5.4.1 - <a name="5.4.1">Patterns</a></h3>\n\n\n<h4>Character Class:</h4><p>\nA <em>character class</em> is used to represent a set of characters.\nThe following combinations are allowed in describing a character class:\n\n<ul>\n\n<li><b><em>x</em>:</b>\n(where <em>x</em> is not one of the <em>magic characters</em>\n<code>^$()%.[]*+-?</code>)\nrepresents the character <em>x</em> itself.\n</li>\n\n<li><b><code>.</code>:</b> (a dot) represents all characters.</li>\n\n<li><b><code>%a</code>:</b> represents all letters.</li>\n\n<li><b><code>%c</code>:</b> represents all control characters.</li>\n\n<li><b><code>%d</code>:</b> represents all digits.</li>\n\n<li><b><code>%l</code>:</b> represents all lowercase letters.</li>\n\n<li><b><code>%p</code>:</b> represents all punctuation characters.</li>\n\n<li><b><code>%s</code>:</b> represents all space characters.</li>\n\n<li><b><code>%u</code>:</b> represents all uppercase letters.</li>\n\n<li><b><code>%w</code>:</b> represents all alphanumeric characters.</li>\n\n<li><b><code>%x</code>:</b> represents all hexadecimal digits.</li>\n\n<li><b><code>%z</code>:</b> represents the character with representation 0.</li>\n\n<li><b><code>%<em>x</em></code>:</b> (where <em>x</em> is any non-alphanumeric character)\nrepresents the character <em>x</em>.\nThis is the standard way to escape the magic characters.\nAny punctuation character (even the non magic)\ncan be preceded by a '<code>%</code>'\nwhen used to represent itself in a pattern.\n</li>\n\n<li><b><code>[<em>set</em>]</code>:</b>\nrepresents the class which is the union of all\ncharacters in <em>set</em>.\nA range of characters may be specified by\nseparating the end characters of the range with a '<code>-</code>'.\nAll classes <code>%</code><em>x</em> described above may also be used as\ncomponents in <em>set</em>.\nAll other characters in <em>set</em> represent themselves.\nFor example, <code>[%w_]</code> (or <code>[_%w]</code>)\nrepresents all alphanumeric characters plus the underscore,\n<code>[0-7]</code> represents the octal digits,\nand <code>[0-7%l%-]</code> represents the octal digits plus\nthe lowercase letters plus the '<code>-</code>' character.\n\n\n<p>\nThe interaction between ranges and classes is not defined.\nTherefore, patterns like <code>[%a-z]</code> or <code>[a-%%]</code>\nhave no meaning.\n</li>\n\n<li><b><code>[^<em>set</em>]</code>:</b>\nrepresents the complement of <em>set</em>,\nwhere <em>set</em> is interpreted as above.\n</li>\n\n</ul><p>\nFor all classes represented by single letters (<code>%a</code>, <code>%c</code>, etc.),\nthe corresponding uppercase letter represents the complement of the class.\nFor instance, <code>%S</code> represents all non-space characters.\n\n\n<p>\nThe definitions of letter, space, and other character groups\ndepend on the current locale.\nIn particular, the class <code>[a-z]</code> may not be equivalent to <code>%l</code>.\n\n\n\n\n\n<h4>Pattern Item:</h4><p>\nA <em>pattern item</em> may be\n\n<ul>\n\n<li>\na single character class,\nwhich matches any single character in the class;\n</li>\n\n<li>\na single character class followed by '<code>*</code>',\nwhich matches 0 or more repetitions of characters in the class.\nThese repetition items will always match the longest possible sequence;\n</li>\n\n<li>\na single character class followed by '<code>+</code>',\nwhich matches 1 or more repetitions of characters in the class.\nThese repetition items will always match the longest possible sequence;\n</li>\n\n<li>\na single character class followed by '<code>-</code>',\nwhich also matches 0 or more repetitions of characters in the class.\nUnlike '<code>*</code>',\nthese repetition items will always match the <em>shortest</em> possible sequence;\n</li>\n\n<li>\na single character class followed by '<code>?</code>',\nwhich matches 0 or 1 occurrence of a character in the class;\n</li>\n\n<li>\n<code>%<em>n</em></code>, for <em>n</em> between 1 and 9;\nsuch item matches a substring equal to the <em>n</em>-th captured string\n(see below);\n</li>\n\n<li>\n<code>%b<em>xy</em></code>, where <em>x</em> and <em>y</em> are two distinct characters;\nsuch item matches strings that start with&nbsp;<em>x</em>, end with&nbsp;<em>y</em>,\nand where the <em>x</em> and <em>y</em> are <em>balanced</em>.\nThis means that, if one reads the string from left to right,\ncounting <em>+1</em> for an <em>x</em> and <em>-1</em> for a <em>y</em>,\nthe ending <em>y</em> is the first <em>y</em> where the count reaches 0.\nFor instance, the item <code>%b()</code> matches expressions with\nbalanced parentheses.\n</li>\n\n</ul>\n\n\n\n\n<h4>Pattern:</h4><p>\nA <em>pattern</em> is a sequence of pattern items.\nA '<code>^</code>' at the beginning of a pattern anchors the match at the\nbeginning of the subject string.\nA '<code>$</code>' at the end of a pattern anchors the match at the\nend of the subject string.\nAt other positions,\n'<code>^</code>' and '<code>$</code>' have no special meaning and represent themselves.\n\n\n\n\n\n<h4>Captures:</h4><p>\nA pattern may contain sub-patterns enclosed in parentheses;\nthey describe <em>captures</em>.\nWhen a match succeeds, the substrings of the subject string\nthat match captures are stored (<em>captured</em>) for future use.\nCaptures are numbered according to their left parentheses.\nFor instance, in the pattern <code>"(a*(.)%w(%s*))"</code>,\nthe part of the string matching <code>"a*(.)%w(%s*)"</code> is\nstored as the first capture (and therefore has number&nbsp;1);\nthe character matching "<code>.</code>" is captured with number&nbsp;2,\nand the part matching "<code>%s*</code>" has number&nbsp;3.\n\n\n<p>\nAs a special case, the empty capture <code>()</code> captures\nthe current string position (a number).\nFor instance, if we apply the pattern <code>"()aa()"</code> on the\nstring <code>"flaaap"</code>, there will be two captures: 3&nbsp;and&nbsp;5.\n\n\n<p>\nA pattern cannot contain embedded zeros.  Use <code>%z</code> instead.\n\n\n\n\n\n\n\n\n\n\n\n<h2>5.5 - <a name="5.5">Table Manipulation</a></h2><p>\nThis library provides generic functions for table manipulation.\nIt provides all its functions inside the table <a name="pdf-table"><code>table</code></a>.\n\n\n<p>\nMost functions in the table library assume that the table\nrepresents an array or a list.\nFor these functions, when we talk about the "length" of a table\nwe mean the result of the length operator.\n</dd>\n]====]

table.concat =[====[\n<dt><a name="table.concat "></a><strong>table.concat </strong>&nbsp;(table [, sep [, i [, j]]])</dt>\n<dd>\nGiven an array where all elements are strings or numbers,\nreturns <code>table[i]..sep..table[i+1] &middot;&middot;&middot; sep..table[j]</code>.\nThe default value for <code>sep</code> is the empty string,\nthe default for <code>i</code> is 1,\nand the default for <code>j</code> is the length of the table.\nIf <code>i</code> is greater than <code>j</code>, returns the empty string.\n</dd>\n]====]

table.insert =[====[\n<dt><a name="table.insert "></a><strong>table.insert </strong>&nbsp;(table, [pos,] value)</dt>\n<dd>\n<p>\nInserts element <code>value</code> at position <code>pos</code> in <code>table</code>,\nshifting up other elements to open space, if necessary.\nThe default value for <code>pos</code> is <code>n+1</code>,\nwhere <code>n</code> is the length of the table (see <a href="#2.5.5">&sect;2.5.5</a>),\nso that a call <code>table.insert(t,x)</code> inserts <code>x</code> at the end\nof table <code>t</code>.\n</dd>\n]====]

table.maxn =[====[\n<dt><a name="table.maxn "></a><strong>table.maxn </strong>&nbsp;(table)</dt>\n<dd>\n<p>\nReturns the largest positive numerical index of the given table,\nor zero if the table has no positive numerical indices.\n(To do its job this function does a linear traversal of\nthe whole table.)\n</dd>\n]====]

table.remove =[====[\n<dt><a name="table.remove "></a><strong>table.remove </strong>&nbsp;(table [, pos])</dt>\n<dd>\n<p>\nRemoves from <code>table</code> the element at position <code>pos</code>,\nshifting down other elements to close the space, if necessary.\nReturns the value of the removed element.\nThe default value for <code>pos</code> is <code>n</code>,\nwhere <code>n</code> is the length of the table,\nso that a call <code>table.remove(t)</code> removes the last element\nof table <code>t</code>.\n</dd>\n]====]

table.sort =[====[\n<dt><a name="table.sort "></a><strong>table.sort </strong>&nbsp;(table [, comp])</dt>\n<dd>\nSorts table elements in a given order, <em>in-place</em>,\nfrom <code>table[1]</code> to <code>table[n]</code>,\nwhere <code>n</code> is the length of the table.\nIf <code>comp</code> is given,\nthen it must be a function that receives two table elements,\nand returns true\nwhen the first is less than the second\n(so that <code>not comp(a[i+1],a[i])</code> will be true after the sort).\nIf <code>comp</code> is not given,\nthen the standard Lua operator <code>&lt;</code> is used instead.\n\n\n<p>\nThe sort algorithm is not stable;\nthat is, elements considered equal by the given order\nmay have their relative positions changed by the sort.\n\n\n\n\n\n\n\n<h2>5.6 - <a name="5.6">Mathematical Functions</a></h2>\n\n<p>\nThis library is an interface to the standard C&nbsp;math library.\nIt provides all its functions inside the table <a name="pdf-math"><code>math</code></a>.\n</dd>\n]====]

math.abs =[====[\n<dt><a name="math.abs "></a><strong>math.abs </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the absolute value of <code>x</code>.\n</dd>\n]====]

math.acos =[====[\n<dt><a name="math.acos "></a><strong>math.acos </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the arc cosine of <code>x</code> (in radians).\n</dd>\n]====]

math.asin =[====[\n<dt><a name="math.asin "></a><strong>math.asin </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the arc sine of <code>x</code> (in radians).\n</dd>\n]====]

math.atan =[====[\n<dt><a name="math.atan "></a><strong>math.atan </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the arc tangent of <code>x</code> (in radians).\n</dd>\n]====]

math.atan2 =[====[\n<dt><a name="math.atan2 "></a><strong>math.atan2 </strong>&nbsp;(y, x)</dt>\n<dd>\n<p>\nReturns the arc tangent of <code>y/x</code> (in radians),\nbut uses the signs of both parameters to find the\nquadrant of the result.\n(It also handles correctly the case of <code>x</code> being zero.)\n</dd>\n]====]

math.ceil =[====[\n<dt><a name="math.ceil "></a><strong>math.ceil </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the smallest integer larger than or equal to <code>x</code>.\n</dd>\n]====]

math.cos =[====[\n<dt><a name="math.cos "></a><strong>math.cos </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the cosine of <code>x</code> (assumed to be in radians).\n</dd>\n]====]

math.cosh =[====[\n<dt><a name="math.cosh "></a><strong>math.cosh </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the hyperbolic cosine of <code>x</code>.\n</dd>\n]====]

math.deg =[====[\n<dt><a name="math.deg "></a><strong>math.deg </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the angle <code>x</code> (given in radians) in degrees.\n</dd>\n]====]

math.exp =[====[\n<dt><a name="math.exp "></a><strong>math.exp </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the value <em>e<sup>x</sup></em>.\n</dd>\n]====]

math.floor =[====[\n<dt><a name="math.floor "></a><strong>math.floor </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the largest integer smaller than or equal to <code>x</code>.\n</dd>\n]====]

math.fmod =[====[\n<dt><a name="math.fmod "></a><strong>math.fmod </strong>&nbsp;(x, y)</dt>\n<dd>\n<p>\nReturns the remainder of the division of <code>x</code> by <code>y</code>.\n</dd>\n]====]

math.frexp =[====[\n<dt><a name="math.frexp "></a><strong>math.frexp </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns <code>m</code> and <code>e</code> such that <em>x = m2<sup>e</sup></em>,\n<code>e</code> is an integer and the absolute value of <code>m</code> is\nin the range <em>[0.5, 1)</em>\n(or zero when <code>x</code> is zero).\n</dd>\n]====]

math.ldexp =[====[\n<dt><a name="math.ldexp "></a><strong>math.ldexp </strong>&nbsp;(m, e)</dt>\n<dd>\n<p>\nReturns <em>m2<sup>e</sup></em> (<code>e</code> should be an integer).\n</dd>\n]====]

math.log =[====[\n<dt><a name="math.log "></a><strong>math.log </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the natural logarithm of <code>x</code>.\n</dd>\n]====]

math.log10 =[====[\n<dt><a name="math.log10 "></a><strong>math.log10 </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the base-10 logarithm of <code>x</code>.\n</dd>\n]====]

math.max =[====[\n<dt><a name="math.max "></a><strong>math.max </strong>&nbsp;(x, &middot;&middot;&middot;)</dt>\n<dd>\n<p>\nReturns the maximum value among its arguments.\n</dd>\n]====]

math.min =[====[\n<dt><a name="math.min "></a><strong>math.min </strong>&nbsp;(x, &middot;&middot;&middot;)</dt>\n<dd>\n<p>\nReturns the minimum value among its arguments.\n</dd>\n]====]

math.modf =[====[\n<dt><a name="math.modf "></a><strong>math.modf </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns two numbers,\nthe integral part of <code>x</code> and the fractional part of <code>x</code>.\n</dd>\n]====]

math.pow =[====[\n<dt><a name="math.pow "></a><strong>math.pow </strong>&nbsp;(x, y)</dt>\n<dd>\n<p>\nReturns <em>x<sup>y</sup></em>.\n(You can also use the expression <code>x^y</code> to compute this value.)\n</dd>\n]====]

math.rad =[====[\n<dt><a name="math.rad "></a><strong>math.rad </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the angle <code>x</code> (given in degrees) in radians.\n</dd>\n]====]

math.random =[====[\n<dt><a name="math.random "></a><strong>math.random </strong>&nbsp;([m [, n]])</dt>\n<dd>\n<p>\nThis function is an interface to the simple\npseudo-random generator function <code>rand</code> provided by ANSI&nbsp;C.\n(No guarantees can be given for its statistical properties.)\n\n\n<p>\nWhen called without arguments,\nreturns a uniform pseudo-random real number\nin the range <em>[0,1)</em>.  \nWhen called with an integer number <code>m</code>,\n<code>math.random</code> returns\na uniform pseudo-random integer in the range <em>[1, m]</em>.\nWhen called with two integer numbers <code>m</code> and <code>n</code>,\n<code>math.random</code> returns a uniform pseudo-random\ninteger in the range <em>[m, n]</em>.\n</dd>\n]====]

math.randomseed =[====[\n<dt><a name="math.randomseed "></a><strong>math.randomseed </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nSets <code>x</code> as the "seed"\nfor the pseudo-random generator:\nequal seeds produce equal sequences of numbers.\n</dd>\n]====]

math.sin =[====[\n<dt><a name="math.sin "></a><strong>math.sin </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the sine of <code>x</code> (assumed to be in radians).\n</dd>\n]====]

math.sinh =[====[\n<dt><a name="math.sinh "></a><strong>math.sinh </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the hyperbolic sine of <code>x</code>.\n</dd>\n]====]

math.sqrt =[====[\n<dt><a name="math.sqrt "></a><strong>math.sqrt </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the square root of <code>x</code>.\n(You can also use the expression <code>x^0.5</code> to compute this value.)\n</dd>\n]====]

math.tan =[====[\n<dt><a name="math.tan "></a><strong>math.tan </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the tangent of <code>x</code> (assumed to be in radians).\n</dd>\n]====]

math.tanh =[====[\n<dt><a name="math.tanh "></a><strong>math.tanh </strong>&nbsp;(x)</dt>\n<dd>\n<p>\nReturns the hyperbolic tangent of <code>x</code>.\n\n\n\n\n\n\n\n<h2>5.7 - <a name="5.7">Input and Output Facilities</a></h2>\n\n<p>\nThe I/O library provides two different styles for file manipulation.\nThe first one uses implicit file descriptors;\nthat is, there are operations to set a default input file and a\ndefault output file,\nand all input/output operations are over these default files.\nThe second style uses explicit file descriptors.\n\n\n<p>\nWhen using implicit file descriptors,\nall operations are supplied by table <a name="pdf-io"><code>io</code></a>.\nWhen using explicit file descriptors,\nthe operation <a href="#pdf-io.open"><code>io.open</code></a> returns a file descriptor\nand then all operations are supplied as methods of the file descriptor.\n\n\n<p>\nThe table <code>io</code> also provides\nthree predefined file descriptors with their usual meanings from C:\n<a name="pdf-io.stdin"><code>io.stdin</code></a>, <a name="pdf-io.stdout"><code>io.stdout</code></a>, and <a name="pdf-io.stderr"><code>io.stderr</code></a>.\nThe I/O library never closes these files.\n\n\n<p>\nUnless otherwise stated,\nall I/O functions return <b>nil</b> on failure\n(plus an error message as a second result and\na system-dependent error code as a third result)\nand some value different from <b>nil</b> on success.\n</dd>\n]====]

io.close =[====[\n<dt><a name="io.close "></a><strong>io.close </strong>&nbsp;([file])</dt>\n<dd>\n<p>\nEquivalent to <code>file:close()</code>.\nWithout a <code>file</code>, closes the default output file.\n</dd>\n]====]

io.flush =[====[\n<dt><a name="io.flush "></a><strong>io.flush </strong>&nbsp;()</dt>\n<dd>\n<p>\nEquivalent to <code>file:flush</code> over the default output file.\n</dd>\n]====]

io.input =[====[\n<dt><a name="io.input "></a><strong>io.input </strong>&nbsp;([file])</dt>\n<dd>\n<p>\nWhen called with a file name, it opens the named file (in text mode),\nand sets its handle as the default input file.\nWhen called with a file handle,\nit simply sets this file handle as the default input file.\nWhen called without parameters,\nit returns the current default input file.\n\n\n<p>\nIn case of errors this function raises the error,\ninstead of returning an error code.\n</dd>\n]====]

io.lines =[====[\n<dt><a name="io.lines "></a><strong>io.lines </strong>&nbsp;([filename])</dt>\n<dd>\n<p>\nOpens the given file name in read mode\nand returns an iterator function that,\neach time it is called,\nreturns a new line from the file.\nTherefore, the construction\n\n<pre>\n     for line in io.lines(filename) do <em>body</em> end\n</pre><p>\nwill iterate over all lines of the file.\nWhen the iterator function detects the end of file,\nit returns <b>nil</b> (to finish the loop) and automatically closes the file.\n\n\n<p>\nThe call <code>io.lines()</code> (with no file name) is equivalent\nto <code>io.input():lines()</code>;\nthat is, it iterates over the lines of the default input file.\nIn this case it does not close the file when the loop ends.\n</dd>\n]====]

io.open =[====[\n<dt><a name="io.open "></a><strong>io.open </strong>&nbsp;(filename [, mode])</dt>\n<dd>\n<p>\nThis function opens a file,\nin the mode specified in the string <code>mode</code>.\nIt returns a new file handle,\nor, in case of errors, <b>nil</b> plus an error message.\n\n\n<p>\nThe <code>mode</code> string can be any of the following:\n\n<ul>\n<li><b>"r":</b> read mode (the default);</li>\n<li><b>"w":</b> write mode;</li>\n<li><b>"a":</b> append mode;</li>\n<li><b>"r+":</b> update mode, all previous data is preserved;</li>\n<li><b>"w+":</b> update mode, all previous data is erased;</li>\n<li><b>"a+":</b> append update mode, previous data is preserved,\n  writing is only allowed at the end of file.</li>\n</ul><p>\nThe <code>mode</code> string may also have a '<code>b</code>' at the end,\nwhich is needed in some systems to open the file in binary mode.\nThis string is exactly what is used in the\nstandard&nbsp;C function <code>fopen</code>.\n</dd>\n]====]

io.output =[====[\n<dt><a name="io.output "></a><strong>io.output </strong>&nbsp;([file])</dt>\n<dd>\n<p>\nSimilar to <a href="#pdf-io.input"><code>io.input</code></a>, but operates over the default output file.\n</dd>\n]====]

io.popen =[====[\n<dt><a name="io.popen "></a><strong>io.popen </strong>&nbsp;(prog [, mode])</dt>\n<dd>\n<p>\nStarts program <code>prog</code> in a separated process and returns\na file handle that you can use to read data from this program\n(if <code>mode</code> is <code>"r"</code>, the default)\nor to write data to this program\n(if <code>mode</code> is <code>"w"</code>).\n\n\n<p>\nThis function is system dependent and is not available\non all platforms.\n</dd>\n]====]

io.read =[====[\n<dt><a name="io.read "></a><strong>io.read </strong>&nbsp;(&middot;&middot;&middot;)</dt>\n<dd>\n<p>\nEquivalent to <code>io.input():read</code>.\n</dd>\n]====]

io.tmpfile =[====[\n<dt><a name="io.tmpfile "></a><strong>io.tmpfile </strong>&nbsp;()</dt>\n<dd>\n<p>\nReturns a handle for a temporary file.\nThis file is opened in update mode\nand it is automatically removed when the program ends.\n</dd>\n]====]

io.type =[====[\n<dt><a name="io.type "></a><strong>io.type </strong>&nbsp;(obj)</dt>\n<dd>\n<p>\nChecks whether <code>obj</code> is a valid file handle.\nReturns the string <code>"file"</code> if <code>obj</code> is an open file handle,\n<code>"closed file"</code> if <code>obj</code> is a closed file handle,\nor <b>nil</b> if <code>obj</code> is not a file handle.\n</dd>\n]====]

io.write =[====[\n<dt><a name="io.write "></a><strong>io.write </strong>&nbsp;(&middot;&middot;&middot;)</dt>\n<dd>\n<p>\nEquivalent to <code>io.output():write</code>.\n</dd>\n]====]

file:close =[====[\n<dt><a name="file:close "></a><strong>file:close </strong>&nbsp;()</dt>\n<dd>\n<p>\nCloses <code>file</code>.\nNote that files are automatically closed when\ntheir handles are garbage collected,\nbut that takes an unpredictable amount of time to happen.\n</dd>\n]====]

file:flush =[====[\n<dt><a name="file:flush "></a><strong>file:flush </strong>&nbsp;()</dt>\n<dd>\n<p>\nSaves any written data to <code>file</code>.\n</dd>\n]====]

file:lines =[====[\n<dt><a name="file:lines "></a><strong>file:lines </strong>&nbsp;()</dt>\n<dd>\n<p>\nReturns an iterator function that,\neach time it is called,\nreturns a new line from the file.\nTherefore, the construction\n\n<pre>\n     for line in file:lines() do <em>body</em> end\n</pre><p>\nwill iterate over all lines of the file.\n(Unlike <a href="#pdf-io.lines"><code>io.lines</code></a>, this function does not close the file\nwhen the loop ends.)\n</dd>\n]====]

file:read =[====[\n<dt><a name="file:read "></a><strong>file:read </strong>&nbsp;(&middot;&middot;&middot;)</dt>\n<dd>\n<p>\nReads the file <code>file</code>,\naccording to the given formats, which specify what to read.\nFor each format,\nthe function returns a string (or a number) with the characters read,\nor <b>nil</b> if it cannot read data with the specified format.\nWhen called without formats,\nit uses a default format that reads the entire next line\n(see below).\n\n\n<p>\nThe available formats are\n\n<ul>\n\n<li><b>"*n":</b>\nreads a number;\nthis is the only format that returns a number instead of a string.\n</li>\n\n<li><b>"*a":</b>\nreads the whole file, starting at the current position.\nOn end of file, it returns the empty string.\n</li>\n\n<li><b>"*l":</b>\nreads the next line (skipping the end of line),\nreturning <b>nil</b> on end of file.\nThis is the default format.\n</li>\n\n<li><b><em>number</em>:</b>\nreads a string with up to this number of characters,\nreturning <b>nil</b> on end of file.\nIf number is zero,\nit reads nothing and returns an empty string,\nor <b>nil</b> on end of file.\n</li>\n\n</ul>\n</dd>\n]====]

file:seek =[====[\n<dt><a name="file:seek "></a><strong>file:seek </strong>&nbsp;([whence] [, offset])</dt>\n<dd>\n<p>\nSets and gets the file position,\nmeasured from the beginning of the file,\nto the position given by <code>offset</code> plus a base\nspecified by the string <code>whence</code>, as follows:\n\n<ul>\n<li><b>"set":</b> base is position 0 (beginning of the file);</li>\n<li><b>"cur":</b> base is current position;</li>\n<li><b>"end":</b> base is end of file;</li>\n</ul><p>\nIn case of success, function <code>seek</code> returns the final file position,\nmeasured in bytes from the beginning of the file.\nIf this function fails, it returns <b>nil</b>,\nplus a string describing the error.\n\n\n<p>\nThe default value for <code>whence</code> is <code>"cur"</code>,\nand for <code>offset</code> is 0.\nTherefore, the call <code>file:seek()</code> returns the current\nfile position, without changing it;\nthe call <code>file:seek("set")</code> sets the position to the\nbeginning of the file (and returns 0);\nand the call <code>file:seek("end")</code> sets the position to the\nend of the file, and returns its size.\n</dd>\n]====]

file:setvbuf =[====[\n<dt><a name="file:setvbuf "></a><strong>file:setvbuf </strong>&nbsp;(mode [, size])</dt>\n<dd>\n<p>\nSets the buffering mode for an output file.\nThere are three available modes:\n\n<ul>\n\n<li><b>"no":</b>\nno buffering; the result of any output operation appears immediately.\n</li>\n\n<li><b>"full":</b>\nfull buffering; output operation is performed only\nwhen the buffer is full (or when you explicitly <code>flush</code> the file\n(see <a href="#pdf-io.flush"><code>io.flush</code></a>)).\n</li>\n\n<li><b>"line":</b>\nline buffering; output is buffered until a newline is output\nor there is any input from some special files\n(such as a terminal device).\n</li>\n\n</ul><p>\nFor the last two cases, <code>size</code>\nspecifies the size of the buffer, in bytes.\nThe default is an appropriate size.\n</dd>\n]====]

file:write =[====[\n<dt><a name="file:write "></a><strong>file:write </strong>&nbsp;(&middot;&middot;&middot;)</dt>\n<dd>\n<p>\nWrites the value of each of its arguments to\nthe <code>file</code>.\nThe arguments must be strings or numbers.\nTo write other values,\nuse <a href="#pdf-tostring"><code>tostring</code></a> or <a href="#pdf-string.format"><code>string.format</code></a> before <code>write</code>.\n\n\n\n\n\n\n\n<h2>5.8 - <a name="5.8">Operating System Facilities</a></h2>\n\n<p>\nThis library is implemented through table <a name="pdf-os"><code>os</code></a>.\n</dd>\n]====]

os.clock =[====[\n<dt><a name="os.clock "></a><strong>os.clock </strong>&nbsp;()</dt>\n<dd>\n<p>\nReturns an approximation of the amount in seconds of CPU time\nused by the program.\n</dd>\n]====]

os.date =[====[\n<dt><a name="os.date "></a><strong>os.date </strong>&nbsp;([format [, time]])</dt>\n<dd>\n<p>\nReturns a string or a table containing date and time,\nformatted according to the given string <code>format</code>.\n\n\n<p>\nIf the <code>time</code> argument is present,\nthis is the time to be formatted\n(see the <a href="#pdf-os.time"><code>os.time</code></a> function for a description of this value).\nOtherwise, <code>date</code> formats the current time.\n\n\n<p>\nIf <code>format</code> starts with '<code>!</code>',\nthen the date is formatted in Coordinated Universal Time.\nAfter this optional character,\nif <code>format</code> is the string "<code>*t</code>",\nthen <code>date</code> returns a table with the following fields:\n<code>year</code> (four digits), <code>month</code> (1--12), <code>day</code> (1--31),\n<code>hour</code> (0--23), <code>min</code> (0--59), <code>sec</code> (0--61),\n<code>wday</code> (weekday, Sunday is&nbsp;1),\n<code>yday</code> (day of the year),\nand <code>isdst</code> (daylight saving flag, a boolean).\n\n\n<p>\nIf <code>format</code> is not "<code>*t</code>",\nthen <code>date</code> returns the date as a string,\nformatted according to the same rules as the C&nbsp;function <code>strftime</code>.\n\n\n<p>\nWhen called without arguments,\n<code>date</code> returns a reasonable date and time representation that depends on\nthe host system and on the current locale\n(that is, <code>os.date()</code> is equivalent to <code>os.date("%c")</code>).\n</dd>\n]====]

os.difftime =[====[\n<dt><a name="os.difftime "></a><strong>os.difftime </strong>&nbsp;(t2, t1)</dt>\n<dd>\n<p>\nReturns the number of seconds from time <code>t1</code> to time <code>t2</code>.\nIn POSIX, Windows, and some other systems,\nthis value is exactly <code>t2</code><em>-</em><code>t1</code>.\n</dd>\n]====]

os.execute =[====[\n<dt><a name="os.execute "></a><strong>os.execute </strong>&nbsp;([command])</dt>\n<dd>\n<p>\nThis function is equivalent to the C&nbsp;function <code>system</code>.\nIt passes <code>command</code> to be executed by an operating system shell.\nIt returns a status code, which is system-dependent.\nIf <code>command</code> is absent, then it returns nonzero if a shell is available\nand zero otherwise.\n</dd>\n]====]

os.exit =[====[\n<dt><a name="os.exit "></a><strong>os.exit </strong>&nbsp;([code])</dt>\n<dd>\n<p>\nCalls the C&nbsp;function <code>exit</code>,\nwith an optional <code>code</code>,\nto terminate the host program.\nThe default value for <code>code</code> is the success code.\n</dd>\n]====]

os.getenv =[====[\n<dt><a name="os.getenv "></a><strong>os.getenv </strong>&nbsp;(varname)</dt>\n<dd>\n<p>\nReturns the value of the process environment variable <code>varname</code>,\nor <b>nil</b> if the variable is not defined.\n</dd>\n]====]

os.remove =[====[\n<dt><a name="os.remove "></a><strong>os.remove </strong>&nbsp;(filename)</dt>\n<dd>\n<p>\nDeletes the file or directory with the given name.\nDirectories must be empty to be removed.\nIf this function fails, it returns <b>nil</b>,\nplus a string describing the error.\n</dd>\n]====]

os.rename =[====[\n<dt><a name="os.rename "></a><strong>os.rename </strong>&nbsp;(oldname, newname)</dt>\n<dd>\n<p>\nRenames file or directory named <code>oldname</code> to <code>newname</code>.\nIf this function fails, it returns <b>nil</b>,\nplus a string describing the error.\n</dd>\n]====]

os.setlocale =[====[\n<dt><a name="os.setlocale "></a><strong>os.setlocale </strong>&nbsp;(locale [, category])</dt>\n<dd>\n<p>\nSets the current locale of the program.\n<code>locale</code> is a string specifying a locale;\n<code>category</code> is an optional string describing which category to change:\n<code>"all"</code>, <code>"collate"</code>, <code>"ctype"</code>,\n<code>"monetary"</code>, <code>"numeric"</code>, or <code>"time"</code>;\nthe default category is <code>"all"</code>.\nThe function returns the name of the new locale,\nor <b>nil</b> if the request cannot be honored.\n\n\n<p>\nIf <code>locale</code> is the empty string,\nthe current locale is set to an implementation-defined native locale.\nIf <code>locale</code> is the string "<code>C</code>",\nthe current locale is set to the standard C locale.\n\n\n<p>\nWhen called with <b>nil</b> as the first argument,\nthis function only returns the name of the current locale\nfor the given category.\n</dd>\n]====]

os.time =[====[\n<dt><a name="os.time "></a><strong>os.time </strong>&nbsp;([table])</dt>\n<dd>\n<p>\nReturns the current time when called without arguments,\nor a time representing the date and time specified by the given table.\nThis table must have fields <code>year</code>, <code>month</code>, and <code>day</code>,\nand may have fields <code>hour</code>, <code>min</code>, <code>sec</code>, and <code>isdst</code>\n(for a description of these fields, see the <a href="#pdf-os.date"><code>os.date</code></a> function).\n\n\n<p>\nThe returned value is a number, whose meaning depends on your system.\nIn POSIX, Windows, and some other systems, this number counts the number\nof seconds since some given start time (the "epoch").\nIn other systems, the meaning is not specified,\nand the number returned by <code>time</code> can be used only as an argument to\n<code>date</code> and <code>difftime</code>.\n</dd>\n]====]

os.tmpname =[====[\n<dt><a name="os.tmpname "></a><strong>os.tmpname </strong>&nbsp;()</dt>\n<dd>\n<p>\nReturns a string with a file name that can\nbe used for a temporary file.\nThe file must be explicitly opened before its use\nand explicitly removed when no longer needed.\n\n\n\n\n\n\n\n<h2>5.9 - <a name="5.9">The Debug Library</a></h2>\n\n<p>\nThis library provides\nthe functionality of the debug interface to Lua programs.\nYou should exert care when using this library.\nThe functions provided here should be used exclusively for debugging\nand similar tasks, such as profiling.\nPlease resist the temptation to use them as a\nusual programming tool:\nthey can be very slow.\nMoreover, several of these functions\nviolate some assumptions about Lua code\n(e.g., that variables local to a function\ncannot be accessed from outside or\nthat userdata metatables cannot be changed by Lua code)\nand therefore can compromise otherwise secure code.\n\n\n<p>\nAll functions in this library are provided\ninside the <a name="pdf-debug"><code>debug</code></a> table.\nAll functions that operate over a thread\nhave an optional first argument which is the\nthread to operate over.\nThe default is always the current thread.\n</dd>\n]====]

debug.debug =[====[\n<dt><a name="debug.debug "></a><strong>debug.debug </strong>&nbsp;()</dt>\n<dd>\n<p>\nEnters an interactive mode with the user,\nrunning each string that the user enters.\nUsing simple commands and other debug facilities,\nthe user can inspect global and local variables,\nchange their values, evaluate expressions, and so on.\nA line containing only the word <code>cont</code> finishes this function,\nso that the caller continues its execution.\n\n\n<p>\nNote that commands for <code>debug.debug</code> are not lexically nested\nwithin any function, and so have no direct access to local variables.\n</dd>\n]====]

debug.getfenv =[====[\n<dt><a name="debug.getfenv "></a><strong>debug.getfenv </strong>&nbsp;(o)</dt>\n<dd>\nReturns the environment of object <code>o</code>.\n</dd>\n]====]

debug.gethook =[====[\n<dt><a name="debug.gethook "></a><strong>debug.gethook </strong>&nbsp;([thread])</dt>\n<dd>\n<p>\nReturns the current hook settings of the thread, as three values:\nthe current hook function, the current hook mask,\nand the current hook count\n(as set by the <a href="#pdf-debug.sethook"><code>debug.sethook</code></a> function).\n</dd>\n]====]

debug.getinfo =[====[\n<dt><a name="debug.getinfo "></a><strong>debug.getinfo </strong>&nbsp;([thread,] function [, what])</dt>\n<dd>\n<p>\nReturns a table with information about a function.\nYou can give the function directly,\nor you can give a number as the value of <code>function</code>,\nwhich means the function running at level <code>function</code> of the call stack\nof the given thread:\nlevel&nbsp;0 is the current function (<code>getinfo</code> itself);\nlevel&nbsp;1 is the function that called <code>getinfo</code>;\nand so on.\nIf <code>function</code> is a number larger than the number of active functions,\nthen <code>getinfo</code> returns <b>nil</b>.\n\n\n<p>\nThe returned table may contain all the fields returned by <a href="#lua_getinfo"><code>lua_getinfo</code></a>,\nwith the string <code>what</code> describing which fields to fill in.\nThe default for <code>what</code> is to get all information available,\nexcept the table of valid lines.\nIf present,\nthe option '<code>f</code>'\nadds a field named <code>func</code> with the function itself.\nIf present,\nthe option '<code>L</code>'\nadds a field named <code>activelines</code> with the table of\nvalid lines.\n\n\n<p>\nFor instance, the expression <code>debug.getinfo(1,"n").name</code> returns\na table with a name for the current function,\nif a reasonable name can be found,\nand the expression <code>debug.getinfo(print)</code>\nreturns a table with all available information\nabout the <a href="#pdf-print"><code>print</code></a> function.\n</dd>\n]====]

debug.getlocal =[====[\n<dt><a name="debug.getlocal "></a><strong>debug.getlocal </strong>&nbsp;([thread,] level, local)</dt>\n<dd>\n<p>\nThis function returns the name and the value of the local variable\nwith index <code>local</code> of the function at level <code>level</code> of the stack.\n(The first parameter or local variable has index&nbsp;1, and so on,\nuntil the last active local variable.)\nThe function returns <b>nil</b> if there is no local\nvariable with the given index,\nand raises an error when called with a <code>level</code> out of range.\n(You can call <a href="#pdf-debug.getinfo"><code>debug.getinfo</code></a> to check whether the level is valid.)\n\n\n<p>\nVariable names starting with '<code>(</code>' (open parentheses)\nrepresent internal variables\n(loop control variables, temporaries, and C&nbsp;function locals).\n</dd>\n]====]

debug.getmetatable =[====[\n<dt><a name="debug.getmetatable "></a><strong>debug.getmetatable </strong>&nbsp;(object)</dt>\n<dd>\n<p>\nReturns the metatable of the given <code>object</code>\nor <b>nil</b> if it does not have a metatable.\n</dd>\n]====]

debug.getregistry =[====[\n<dt><a name="debug.getregistry "></a><strong>debug.getregistry </strong>&nbsp;()</dt>\n<dd>\n<p>\nReturns the registry table (see <a href="#3.5">&sect;3.5</a>).\n</dd>\n]====]

debug.getupvalue =[====[\n<dt><a name="debug.getupvalue "></a><strong>debug.getupvalue </strong>&nbsp;(func, up)</dt>\n<dd>\n<p>\nThis function returns the name and the value of the upvalue\nwith index <code>up</code> of the function <code>func</code>.\nThe function returns <b>nil</b> if there is no upvalue with the given index.\n</dd>\n]====]

debug.setfenv =[====[\n<dt><a name="debug.setfenv "></a><strong>debug.setfenv </strong>&nbsp;(object, table)</dt>\n<dd>\n<p>\nSets the environment of the given <code>object</code> to the given <code>table</code>.\nReturns <code>object</code>.\n</dd>\n]====]

debug.sethook =[====[\n<dt><a name="debug.sethook "></a><strong>debug.sethook </strong>&nbsp;([thread,] hook, mask [, count])</dt>\n<dd>\n<p>\nSets the given function as a hook.\nThe string <code>mask</code> and the number <code>count</code> describe\nwhen the hook will be called.\nThe string mask may have the following characters,\nwith the given meaning:\n\n<ul>\n<li><b><code>"c"</code>:</b> the hook is called every time Lua calls a function;</li>\n<li><b><code>"r"</code>:</b> the hook is called every time Lua returns from a function;</li>\n<li><b><code>"l"</code>:</b> the hook is called every time Lua enters a new line of code.</li>\n</ul><p>\nWith a <code>count</code> different from zero,\nthe hook is called after every <code>count</code> instructions.\n\n\n<p>\nWhen called without arguments,\n<a href="#pdf-debug.sethook"><code>debug.sethook</code></a> turns off the hook.\n\n\n<p>\nWhen the hook is called, its first parameter is a string\ndescribing the event that has triggered its call:\n<code>"call"</code>, <code>"return"</code> (or <code>"tail return"</code>),\n<code>"line"</code>, and <code>"count"</code>.\nFor line events,\nthe hook also gets the new line number as its second parameter.\nInside a hook,\nyou can call <code>getinfo</code> with level&nbsp;2 to get more information about\nthe running function\n(level&nbsp;0 is the <code>getinfo</code> function,\nand level&nbsp;1 is the hook function),\nunless the event is <code>"tail return"</code>.\nIn this case, Lua is only simulating the return,\nand a call to <code>getinfo</code> will return invalid data.\n</dd>\n]====]

debug.setlocal =[====[\n<dt><a name="debug.setlocal "></a><strong>debug.setlocal </strong>&nbsp;([thread,] level, local, value)</dt>\n<dd>\n<p>\nThis function assigns the value <code>value</code> to the local variable\nwith index <code>local</code> of the function at level <code>level</code> of the stack.\nThe function returns <b>nil</b> if there is no local\nvariable with the given index,\nand raises an error when called with a <code>level</code> out of range.\n(You can call <code>getinfo</code> to check whether the level is valid.)\nOtherwise, it returns the name of the local variable.\n</dd>\n]====]

debug.setmetatable =[====[\n<dt><a name="debug.setmetatable "></a><strong>debug.setmetatable </strong>&nbsp;(object, table)</dt>\n<dd>\n<p>\nSets the metatable for the given <code>object</code> to the given <code>table</code>\n(which can be <b>nil</b>).\n</dd>\n]====]

debug.setupvalue =[====[\n<dt><a name="debug.setupvalue "></a><strong>debug.setupvalue </strong>&nbsp;(func, up, value)</dt>\n<dd>\n<p>\nThis function assigns the value <code>value</code> to the upvalue\nwith index <code>up</code> of the function <code>func</code>.\nThe function returns <b>nil</b> if there is no upvalue\nwith the given index.\nOtherwise, it returns the name of the upvalue.\n</dd>\n]====]

